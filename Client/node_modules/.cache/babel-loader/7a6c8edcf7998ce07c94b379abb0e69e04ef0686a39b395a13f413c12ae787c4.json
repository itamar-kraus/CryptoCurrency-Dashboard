{"ast":null,"code":"import { Chart } from \"chart.js/auto\";\nconst getDateAtIndex = index => {\n  // Get the current year\n  var currentYear = new Date().getFullYear();\n\n  // Create a new date object for January 1st of the current year\n  var currentDate = new Date(currentYear, 0, 1);\n\n  // Add the index number of days to the current date\n  currentDate.setDate(currentDate.getDate() + index);\n  return currentDate;\n};\nlet priceChart;\nexport const updateGraph = chartData => {\n  const days = [];\n  for (var i = 0; i < 365; i++) {\n    days.push(getDateAtIndex(i));\n  }\n  const chartPrices = chartData.prices.map(subList => subList[1]);\n  //const chartMarketCap = chartData.market_caps.map(extractSecondElement);\n\n  // Check if dark mode is enabled\n  const isDarkMode = document.documentElement.classList.contains(\"dark\");\n  // Define background color based on dark mode\n  const chartBackgroundColor = isDarkMode ? \"gray\" : \"gray\";\n  const chartLineColor = isDarkMode ? \"white\" : \"black\"; // Set the line color based on dark mode\n\n  // Check if the chart is already initialized\n  if (priceChart) {\n    priceChart.data.datasets[0].data = chartPrices;\n    priceChart.data.datasets[0].backgroundColor = chartBackgroundColor;\n    //priceChart.data.datasets[1].data = chartMarketCap;\n    //priceChart.data.datasets[1].backgroundColor = chartBackgroundColor;\n\n    // Update the legend label color\n    priceChart.options.plugins.legend.labels.color = isDarkMode ? \"white\" : \"black\";\n\n    // Update the grid and ticks colors\n    priceChart.options.scales.x.grid.color = isDarkMode ? \"rgba(255, 255, 255, 0.1)\" : \"rgba(0, 0, 0, 0.1)\";\n    priceChart.options.scales.x.ticks.color = isDarkMode ? \"white\" : \"black\";\n    priceChart.options.scales.y.grid.color = isDarkMode ? \"rgba(255, 255, 255, 0.1)\" : \"rgba(0, 0, 0, 0.1)\";\n    priceChart.options.scales.y.ticks.color = isDarkMode ? \"white\" : \"black\";\n    priceChart.data.datasets[0].borderColor = chartLineColor;\n\n    // Update the chart\n    priceChart.update();\n  } else {\n    // Initialize a new chart\n    const priceChartCanvas = document.getElementById(\"line-chart\");\n    priceChart = new Chart(priceChartCanvas, {\n      type: \"line\",\n      data: {\n        labels: days,\n        datasets: [{\n          data: chartPrices,\n          borderWidth: 2,\n          backgroundColor: chartBackgroundColor,\n          borderColor: \"white\",\n          pointRadius: 0,\n          pointHoverRadius: 10,\n          label: \"Prices in USD\"\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            labels: {\n              color: \"white\"\n            }\n          }\n        },\n        scales: {\n          x: {\n            display: false,\n            grid: {\n              color: \"rgba(255, 255, 255, 0.1)\"\n            },\n            ticks: {\n              color: \"white\"\n            }\n          },\n          y: {\n            beginAtZero: true,\n            grid: {\n              color: \"rgba(255, 255, 255, 0.1)\"\n            },\n            ticks: {\n              color: \"white\"\n            }\n          }\n        }\n      }\n    });\n  }\n};","map":{"version":3,"names":["Chart","getDateAtIndex","index","currentYear","Date","getFullYear","currentDate","setDate","getDate","priceChart","updateGraph","chartData","days","i","push","chartPrices","prices","map","subList","isDarkMode","document","documentElement","classList","contains","chartBackgroundColor","chartLineColor","data","datasets","backgroundColor","options","plugins","legend","labels","color","scales","x","grid","ticks","y","borderColor","update","priceChartCanvas","getElementById","type","borderWidth","pointRadius","pointHoverRadius","label","display","beginAtZero"],"sources":["C:/Users/ndvp3/OneDrive - ort braude college of engineering/שולחן העבודה/סמסטר 6/WEB/Project_react/CryptoCurrency-Dashboard/src/Home/CryptoChart/utils.js"],"sourcesContent":["import { Chart } from \"chart.js/auto\";\r\n\r\nconst getDateAtIndex = (index) => {\r\n  // Get the current year\r\n  var currentYear = new Date().getFullYear();\r\n\r\n  // Create a new date object for January 1st of the current year\r\n  var currentDate = new Date(currentYear, 0, 1);\r\n\r\n  // Add the index number of days to the current date\r\n  currentDate.setDate(currentDate.getDate() + index);\r\n\r\n  return currentDate;\r\n};\r\n\r\nlet priceChart;\r\n\r\nexport const updateGraph = (chartData) => {\r\n  const days = [];\r\n  for (var i = 0; i < 365; i++) {\r\n    days.push(getDateAtIndex(i));\r\n  }\r\n  const chartPrices = chartData.prices.map((subList) => subList[1]);\r\n  //const chartMarketCap = chartData.market_caps.map(extractSecondElement);\r\n\r\n  // Check if dark mode is enabled\r\n  const isDarkMode = document.documentElement.classList.contains(\"dark\");\r\n  // Define background color based on dark mode\r\n  const chartBackgroundColor = isDarkMode ? \"gray\" : \"gray\";\r\n  const chartLineColor = isDarkMode ? \"white\" : \"black\"; // Set the line color based on dark mode\r\n\r\n  // Check if the chart is already initialized\r\n  if (priceChart) {\r\n    priceChart.data.datasets[0].data = chartPrices;\r\n    priceChart.data.datasets[0].backgroundColor = chartBackgroundColor;\r\n    //priceChart.data.datasets[1].data = chartMarketCap;\r\n    //priceChart.data.datasets[1].backgroundColor = chartBackgroundColor;\r\n\r\n    // Update the legend label color\r\n    priceChart.options.plugins.legend.labels.color = isDarkMode\r\n      ? \"white\"\r\n      : \"black\";\r\n\r\n    // Update the grid and ticks colors\r\n    priceChart.options.scales.x.grid.color = isDarkMode\r\n      ? \"rgba(255, 255, 255, 0.1)\"\r\n      : \"rgba(0, 0, 0, 0.1)\";\r\n    priceChart.options.scales.x.ticks.color = isDarkMode ? \"white\" : \"black\";\r\n    priceChart.options.scales.y.grid.color = isDarkMode\r\n      ? \"rgba(255, 255, 255, 0.1)\"\r\n      : \"rgba(0, 0, 0, 0.1)\";\r\n    priceChart.options.scales.y.ticks.color = isDarkMode ? \"white\" : \"black\";\r\n    priceChart.data.datasets[0].borderColor = chartLineColor;\r\n\r\n    // Update the chart\r\n    priceChart.update();\r\n  } else {\r\n    // Initialize a new chart\r\n    const priceChartCanvas = document.getElementById(\"line-chart\");\r\n    priceChart = new Chart(priceChartCanvas, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: days,\r\n        datasets: [\r\n          {\r\n            data: chartPrices,\r\n            borderWidth: 2,\r\n            backgroundColor: chartBackgroundColor,\r\n            borderColor: \"white\",\r\n            pointRadius: 0,\r\n            pointHoverRadius: 10,\r\n            label: \"Prices in USD\",\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        plugins: {\r\n          legend: {\r\n            labels: {\r\n              color: \"white\",\r\n            },\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            display: false,\r\n            grid: {\r\n              color: \"rgba(255, 255, 255, 0.1)\",\r\n            },\r\n            ticks: {\r\n              color: \"white\",\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            grid: {\r\n              color: \"rgba(255, 255, 255, 0.1)\",\r\n            },\r\n            ticks: {\r\n              color: \"white\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}